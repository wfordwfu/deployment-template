---
- hosts: localhost
  connection: local
  gather_facts: true
  vars:
    ansible_python_interpreter: /usr/bin/python3

  pre_tasks:
    #- include_vars: "ansible/vars/{{ lookup('env', 'HOSTNAME') }}.yml"
    - include_vars: "vars/localhost.yml"

    - name: Include OS-specific variables (Debian).
      include_vars: "{{ ansible_os_family }}.yml"
      when: ansible_os_family == "Debian"

    - name: Define OS-specific dependencies.
      set_fact:
        os_specific_dependencies: "{{ __os_specific_dependencies | list }}"
      when: os_specific_dependencies is not defined

#    - name: Print Path
#      debug:
#        msg: "{{ ansible_env.PATH }}"

  tasks:
    - name: Ensure OS-specific dependencies are installed.
      package:
        name: "{{ os_specific_dependencies }}"
        state: present
      become: true

    - name: implement zsh role
      include_role:
        name: zsh

    - name: implement helm role
      include_role:
        name: helm
      when: incRoles.helm == true

    - name: implement kubectl role
      include_role:
        name: kubectl
      when: incRoles.kubectl == true

    - name: implement cmctl role
      include_role:
        name: cmctl
      when: incRoles.cmctl == true

    - name: implement Azure-cli role
      include_role:
        name: az-cli
      when: incRoles.azcli == true

    - name: implement git role
      include_role:
        name: git
      when: incRoles.git == true

    - name: implement github role
      include_role:
        name: github
      when: incRoles.github == true

    - name: implement rust role
      include_role:
        name: rust
      when: incRoles.rust == true

    - name: implement golang role
      include_role:
        name: golang
      when: incRoles.golang == true
    
    - name: implement k9s role
      include_role:
        name: k9s
      when: incRoles.k9s == true

    - name: implement argocd-cli role
      include_role:
        name: argocd-cli
      when: incRoles.argocd_cli == true

    - name: implement minio-cli role
      include_role:
        name: minio-cli
      when: incRoles.minio_cli == true

    - name: install Miniconda
      include_role:
        name: miniconda
      when: incRoles.miniconda == true

    - name: implement Oh My Zsh
      include_role:
        name: oh-my-zsh
      when: incRoles.oh_my_zsh == true

    - name: maintain VS Code extensions
      include_role:
        name: vscode
      when: incRoles.vscode == true

    - name: Get nodes
      command: kubectl get nodes
      register: current_nodes
      changed_when: false

    - name: Print nodes
      debug:
        msg: "{{ current_nodes.stdout }}"

    - name: Install kubernetes module
      ansible.builtin.pip:
        name: kubernetes

    - name: Download Rancher Local Path Storage Manifest
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.22/deploy/local-path-storage.yaml
        dest: /tmp/local-path-storage.yaml
        mode: '0664'

    - name: Apply Rancher Local Path Storage Manifest
      kubernetes.core.k8s:
        state: present
        src: /tmp/local-path-storage.yaml

    - name: Clean up Rancher Local Path Storage Manifest
      ansible.builtin.file:
        path: /tmp/local-path-storage.yaml
        state: absent

    - name: include jetstack-helm
      import_tasks: include/jetstack-helm.yml

    - name: include cert-manager
      import_tasks: include/cert-manager-jetstack.yml

    - name: include traefik
      import_tasks: include/traefik-helm.yml

    - name: include MiniO
      import_tasks: include/minio-helm.yml
      when: applications.minio == true

    - name: include Argo CD
      import_tasks: include/argocd-helm.yml
      when: applications.argocd == true

    - name: include kube-prometheus-stack
      import_tasks: include/kube-prometheus-helm.yml
      when: applications.monitoring == true

    - name: include Airflow
      import_tasks: include/airflow-helm.yml
      when: applications.airflow == true

#    - name: include Longhorn
#      import_tasks: ansible/longhorn-helm.yml